import{_ as e,c as n,o as s,a}from"./app.cca696e2.js";const u=JSON.parse('{"title":"Components in your GameObjects","description":"","frontmatter":{},"headers":[{"level":2,"title":"So how do we add them?","slug":"so-how-do-we-add-them","link":"#so-how-do-we-add-them","children":[]},{"level":2,"title":"What later?","slug":"what-later","link":"#what-later","children":[]}],"relativePath":"samples/GameObjects/components.md"}'),o={name:"samples/GameObjects/components.md"},t=a(`<h1 id="components-in-your-gameobjects" tabindex="-1">Components in your GameObjects <a class="header-anchor" href="#components-in-your-gameobjects" aria-hidden="true">#</a></h1><p>Logic is not everything we need, we also need function. Thats what components are for, by simply adding couple components you can change function of your GameObjects. Let&#39;s take for example MeshComponents, paired with TransformComponents it automatically tells the engine that your Object is renderable. InputComponent allows for interaction with player thru input events.</p><h2 id="so-how-do-we-add-them" tabindex="-1">So how do we add them? <a class="header-anchor" href="#so-how-do-we-add-them" aria-hidden="true">#</a></h2><p>You can simply add them from within you GameObject implementation, eaither in constructor, begin play or any other function.</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>If you want for you component to be loadable from scene file it needs to be added in the constructor. Adding it in begin play will overwrite loaded component as component loading is handled between construction and begining of scele life.</p></div><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki"><code><span class="line"><span style="color:#82AAFF;">AddComponent</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">MyComponent{}</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div><p>Or from outside, for example if your Parent GameObject has a child you want to add component to.</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">childObject </span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">AddComponent</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">MyComponent{}</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div><h2 id="what-later" tabindex="-1">What later? <a class="header-anchor" href="#what-later" aria-hidden="true">#</a></h2><p>Later in your GameObject lifetime you can at any time check if object has component you need and get it, to for example overvrite it.</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">childObject </span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;"> HasComponent</span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">MyComponent</span><span style="color:#89DDFF;">&gt;()){</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">auto</span><span style="color:#F07178;"> comp </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">childObject </span><span style="color:#89DDFF;">-&gt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">GetComponent</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">MyComponent</span><span style="color:#89DDFF;">&gt;()</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div>`,11),p=[t];function l(c,r,i,d,h,m){return s(),n("div",null,p)}const C=e(o,[["render",l]]);export{u as __pageData,C as default};
