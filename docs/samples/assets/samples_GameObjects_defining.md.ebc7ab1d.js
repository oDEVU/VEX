import{_ as s,c as a,o as n,a as e}from"./app.cca696e2.js";const u=JSON.parse('{"title":"Defining GameObjects","description":"","frontmatter":{},"headers":[{"level":2,"title":"Basic Example:","slug":"basic-example","link":"#basic-example","children":[{"level":3,"title":"Sources/YourObject.hpp","slug":"sources-yourobject-hpp","link":"#sources-yourobject-hpp","children":[]},{"level":3,"title":"Sources/YourObject.cpp","slug":"sources-yourobject-cpp","link":"#sources-yourobject-cpp","children":[]}]}],"relativePath":"samples/GameObjects/defining.md"}'),o={name:"samples/GameObjects/defining.md"},l=e(`<h1 id="defining-gameobjects" tabindex="-1">Defining GameObjects <a class="header-anchor" href="#defining-gameobjects" aria-hidden="true">#</a></h1><p>Defining your own GameObject class is super easy. You just create your class that inherits from GameObject or any other Object that already inherits at some point from it. Call original constructor and implement virtual functions and add your custom logic.</p><h2 id="basic-example" tabindex="-1">Basic Example: <a class="header-anchor" href="#basic-example" aria-hidden="true">#</a></h2><h3 id="sources-yourobject-hpp" tabindex="-1">Sources/YourObject.hpp <a class="header-anchor" href="#sources-yourobject-hpp" aria-hidden="true">#</a></h3><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki"><code><span class="line"><span style="color:#C792EA;">namespace</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">vex</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">YourObject</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">public</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">GameObject</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">YourObject</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">Engine</span><span style="color:#C792EA;">&amp;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">engine</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">string</span><span style="color:#C792EA;">&amp;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">GameObject</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">engine</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> name</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;">        // You can add some components here or initialize some objects</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">void</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">BeginPlay</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">override</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;">        // This function is called when scene is loaded</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">void</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">Update</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">float</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">deltaTime</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">override</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;">        // This function is called before every frame</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#C792EA;">private</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> some_int_val </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">void</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">some_function</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;">        // You can add custom logic here</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span></code></pre></div><h3 id="sources-yourobject-cpp" tabindex="-1">Sources/YourObject.cpp <a class="header-anchor" href="#sources-yourobject-cpp" aria-hidden="true">#</a></h3><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">YourObject.hpp</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">namespace</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">vex</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#82AAFF;">REGISTER_GAME_OBJECT</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">Player</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>If you want for your object to be loadable from scene files and not only created by other object, there are currently some constraints. You class cant have custom constructor parameters. It can only accept engine and name. This is limitation due how class registration work.</p><p>Only if this criteria are met you can register your class and expect it to be loaded from scene.</p></div>`,8),p=[l];function c(t,r,i,y,F,d){return n(),a("div",null,p)}const h=s(o,[["render",c]]);export{u as __pageData,h as default};
