import{_ as s,c as n,o as a,a as o}from"./app.cca696e2.js";const A=JSON.parse('{"title":"InputComponent","description":"","frontmatter":{},"headers":[{"level":2,"title":"Usage","slug":"usage","link":"#usage","children":[]}],"relativePath":"samples/Components/inputcomponent.md"}'),t={name:"samples/Components/inputcomponent.md"},e=o(`<h1 id="inputcomponent" tabindex="-1">InputComponent <a class="header-anchor" href="#inputcomponent" aria-hidden="true">#</a></h1><p>Arguably second most important component right after the TransformComponent. It allows for user interaction with the game world.</p><h2 id="usage" tabindex="-1">Usage <a class="header-anchor" href="#usage" aria-hidden="true">#</a></h2><p>After creating it you can add unlimited binding to it by simply calling</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">inputComp</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addBinding</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">SDL_SCANCODE_E</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">vex</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">InputActionState</span><span style="color:#89DDFF;">::</span><span style="color:#A6ACCD;">Pressed</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[this](</span><span style="color:#C792EA;">float</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">delta</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">log</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Pressed E</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">});</span></span>
<span class="line"></span></code></pre></div><p>for action bindings or:</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">inputComp</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addMouseAxisBinding</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">vex</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">MouseAxis</span><span style="color:#89DDFF;">::</span><span style="color:#A6ACCD;">X</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[this](</span><span style="color:#C792EA;">float</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">factor</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">log</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">factor %d</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> factor</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">});</span></span>
<span class="line"></span></code></pre></div><p>Where action bindings have multiple press states:</p><table><thead><tr><th>State</th><th>Description</th></tr></thead><tbody><tr><td>Pressed</td><td>Assigned function executed once when the button is pressed</td></tr><tr><td>Released</td><td>Assigned function executed once when the button is released</td></tr><tr><td>Held</td><td>Assigned function executed repeatedly as long as button is down</td></tr></tbody></table><p>and Axis bindings have multiple axis states, simple X and Y.</p>`,10),p=[e];function l(c,r,i,d,D,F){return a(),n("div",null,p)}const C=s(t,[["render",l]]);export{A as __pageData,C as default};
