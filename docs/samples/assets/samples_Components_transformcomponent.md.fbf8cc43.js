import{_ as s,c as n,o as a,a as o}from"./app.cca696e2.js";const m=JSON.parse('{"title":"TransformComponent","description":"","frontmatter":{},"headers":[{"level":2,"title":"Creation","slug":"creation","link":"#creation","children":[]},{"level":2,"title":"Usage","slug":"usage","link":"#usage","children":[]}],"relativePath":"samples/Components/transformcomponent.md"}'),e={name:"samples/Components/transformcomponent.md"},l=o(`<h1 id="transformcomponent" tabindex="-1">TransformComponent <a class="header-anchor" href="#transformcomponent" aria-hidden="true">#</a></h1><p>TransformComponent is a component that defines the position, rotation, and scale. It also handles parenting logic and provides methods like getWorldPosition, or GetFrontVector.</p><h2 id="creation" tabindex="-1">Creation <a class="header-anchor" href="#creation" aria-hidden="true">#</a></h2><p>Its constructor is overloadable, you can pass it some starter values or create empty transform for later use.</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki"><code><span class="line"><span style="color:#676E95;">// both definitions are valid</span></span>
<span class="line"><span style="color:#FFCB6B;">vex</span><span style="color:#89DDFF;">::</span><span style="color:#A6ACCD;">TransformComponent firstTransform </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">vex</span><span style="color:#89DDFF;">::</span><span style="color:#A6ACCD;">TransformComponent</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">glm</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">vec3</span><span style="color:#89DDFF;">{</span><span style="color:#F78C6C;">0.0f</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0.3f</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0.0f</span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">glm</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">vec3</span><span style="color:#89DDFF;">{</span><span style="color:#F78C6C;">0.0f</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0.0f</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0.0f</span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">glm</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">vec3</span><span style="color:#89DDFF;">{</span><span style="color:#F78C6C;">1.0f</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1.0f</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1.0f</span><span style="color:#89DDFF;">}};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">vex</span><span style="color:#89DDFF;">::</span><span style="color:#A6ACCD;">TransformComponent seccondTransform </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">vex</span><span style="color:#89DDFF;">::</span><span style="color:#A6ACCD;">TransformComponent</span><span style="color:#89DDFF;">{};</span></span>
<span class="line"></span></code></pre></div><h2 id="usage" tabindex="-1">Usage <a class="header-anchor" href="#usage" aria-hidden="true">#</a></h2><p>As said it not only holds data but provides usefull methods.</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">myTransform</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getForwardVector</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">m_engine</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getRegistry</span><span style="color:#89DDFF;">())</span></span>
<span class="line"></span></code></pre></div><p>Returns normalized front vector of an object, usefull for example for movement logic. It also implements similar methods for right and up vector.</p><p>There are also GetWorld Position, Rotation and Scale methods, super usefull to get actual in world transforms for child objects.</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">myTransform</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getWorldPosition</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">m_engine</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getRegistry</span><span style="color:#89DDFF;">())</span></span>
<span class="line"></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>There are curently no get local methods as TransformComponent.position is already local. That is in plans tho.</p></div>`,12),p=[l];function t(r,c,i,F,y,d){return a(),n("div",null,p)}const C=s(e,[["render",t]]);export{m as __pageData,C as default};
